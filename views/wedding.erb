<!doctype html>
<% # TODO:
# filter
# lazy load
# request Limit
# thumbs up; comment
# weixin or guid cookie
# db
%>
<% #tickets
# ngnix + browser static cache (instead of 304)
# server cache
# modal: zoom in or 放大镜: cursor; overflow; 100%
# modal pic preload, to prevent lag 
# icon img needs changing
# css global clean/init 
# big pic: add arrow
# bottom loading gif
# scroll to bottom + modal: quick flash
# test ie
# img alt title
# gzip
# js uglify
%>
<% total_img_num = 89 %>
<% init_img_num = 10 %>

<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>雁轩</title>
  <link rel='stylesheet' href='css/main.css' media='screen' />
  <link rel="shortcut icon" href="images/icon.png">
</head>
<body>
  <div id='header'>
  </div>
  <div id='main'>
    <div id="cascade-container">
      <% 0.upto (init_img_num - 1) do |i| %>
      <div class="grid hidden" id="<%= i %>">
        <div class="thumb"><img src="images/<%= i %>-small.jpg" width="250" /></div>
      </div>
      <% end %>
    </div>
    <div id='modal-container' class='hidden'>
      <div id='modal'></div>
      <div id='large-image-container'>
        <img id='large-image' />
      </div>
    </div>
  </div>
  <div id='foot'>
  </div>
</body>
<script type="text/javascript" src="js/jquery.min.js"></script>
<script type="text/javascript">
  //$(function() {
    $(window).load(function() {
      renderCascade();
      checkHitBottom();
      addTucao($('.grid'));
    });
    var showNewCascade = function() {
      if (GLOBALS.renderedGridIndex >= GLOBALS.TOTAL_IMG_NUM - 1) return;
      var batchId = (GLOBALS.renderedGridIndex + 1);
      var newElStr = '<div id="batch-' + batchId + '">';
      var actualLoadBatchSize = 0;
      for (var i = GLOBALS.renderedGridIndex + 1; i <= GLOBALS.renderedGridIndex + GLOBALS.loadImgBatchSize && i < GLOBALS.TOTAL_IMG_NUM; i++) {
        newElStr += '<div class="grid" id="' + i + '"><div class="thumb"><img src="images/' + i + '-small.jpg" width="250" /></div></div>';
        actualLoadBatchSize ++;
      };
      var newEl = $(newElStr);
      GLOBALS.loadImgCounter = 0;
      $('#cascade-container').append(newEl);
      var batchEl = $('#batch-' + batchId);
      batchEl.find('img').load(function() {
        GLOBALS.loadImgCounter ++;
        if (GLOBALS.loadImgCounter == actualLoadBatchSize) {
          addTucao(batchEl.find('.grid'));
          renderCascade();
          //checkHitBottom();
          GLOBALS.bottomCheckProcessing = false;
        };
      });
    };
    // Scroll event
    $(window).scroll(function(){
      checkHitBottom();
    });

    var checkHitBottom = function() {
      if (GLOBALS.bottomCheckProcessing) return;
      if (hasHitBottom()) {
        GLOBALS.bottomCheckProcessing = true;
        // Make it async so scroll event could pop up; and thus there won't be a perceivable scroll lag
        //setTimeout(showNewCascade, 1);
        showNewCascade();
      };
    }

    // Window resize event
    $(window).resize(function() {
      // TODO: lock here?
      var newColumnNum = calculateCurrentColumnNum();
      if (GLOBALS.originalColumnNum != newColumnNum) {
        GLOBALS.originalColumnNum = newColumnNum;
        GLOBALS.columnHeights = [];
        GLOBALS.renderedGridIndex = -1;
        renderCascade();
        checkHitBottom();
      };
    });

    // Main render logic
    var renderCascade = function() {
      var columnNum = calculateCurrentColumnNum();
      var containerWidth = columnNum * GLOBALS.COLUMN_WIDTH;
      $('#cascade-container').css({'width': containerWidth + 'px'});
      GLOBALS.originalColumnNum = columnNum;
      var grids = $('.grid');
      for (var i = 0; i < grids.length; i++) {
        if (i <= GLOBALS.renderedGridIndex) continue;
        var el = $(grids[i]);
        var columnIndex = getMinHeightColumn(GLOBALS.columnHeights, columnNum);
        var leftOffset = columnIndex * GLOBALS.COLUMN_WIDTH;
        var topOffset = GLOBALS.columnHeights[columnIndex] ? GLOBALS.columnHeights[columnIndex] : 0;
        moveGrid(el, leftOffset, topOffset);
        var height = el.height() + (GLOBALS.VERTICAL_PADDING + GLOBALS.VERTICAL_MARGIN) * 2;
        GLOBALS.columnHeights[columnIndex] = topOffset + height;
        GLOBALS.renderedGridIndex ++;
      };
    };

    var moveGrid = function(el, leftOffset, topOffset) {
      el.removeClass('hidden');
      el.css({
        'position': 'absolute',
        'left': leftOffset,
        'top': topOffset
      });
    };

    // Modal
    $(document).on('click', '.grid img', function() {
      var id = $(this).parents('.grid').attr('id');
      $('#modal-container').removeClass('hidden');
      var imageEl = $('#large-image');
      var imageSrc = 'images/' + id + '-large.JPG';
      imageEl.attr('src', imageSrc);
      // While the image is loading, we can use the thumbnail pic to calculate the display width/height.
      var smallImageEl = $('#' + id + ' img');
      var ratio = 0.9;
      var height = $(window).height();
      var width = $(window).width();
      var imgHeight = smallImageEl.height();
      var imgWidth = smallImageEl.width();
      if (imgHeight * width > imgWidth * height) {
        adjustLargetImage(imageEl, height * ratio, height * imgWidth / imgHeight * ratio);
      } else {
        adjustLargetImage(imageEl, width * imgHeight / imgWidth * ratio, width * ratio);
      };
    });
    var adjustLargetImage = function(el, height, width) {
      el.attr('height', height + 'px');
      el.attr('width', width + 'px');
    };
    $(document).on('click', '#modal-container', function() {
      $('#large-image').attr('src', '');
      $('#modal-container').addClass('hidden');
    });

    // Utils
    var calculateCurrentColumnNum = function() {
      var num = Math.floor($(window).width() / GLOBALS.COLUMN_WIDTH);
      if (num < 1) num = 1;
      return num;
    };
    var getMinHeightColumn = function(arr, columnNum) {
      if (arr.length < columnNum) return arr.length;
      var min = Infinity;
      var index = 0;
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] < min) {
          index = i;
          min = arr[i];
        };
      };
      return index;
    };
    var hasHitBottom = function() {
      var minColumnHeight = Math.min.apply(null, GLOBALS.columnHeights);
      return (minColumnHeight < $(this).scrollTop() + $(this).height());
    };
    var addCookie = function(key, value) {
      document.cookie = escape(key) + "=" + escape(value);
    };
    var GLOBALS = {
      COLUMN_WIDTH: 310,
      VERTICAL_PADDING: 10,
      VERTICAL_MARGIN: 10,
      TOTAL_IMG_NUM: <%= total_img_num %>,
      loadImgBatchSize: 5,
      loadImgCounter: 0,
      columnHeights: [],
      originalColumnNum: 0,
      renderedGridIndex: -1,
      bottomCheckProcessing: false,
      easterCount: 0,
      easterOn: <%= easter_on %>,
      tucaoArr: <%= tucao_arr %>
    };
    // Easter egg
    var showMeTheSecrets = function() {
      addTucao($('.grid'));
    };
    $('#0').click(function() {
      if (GLOBALS.easterCount < 3) {
        GLOBALS.easterCount += 1;
        if (GLOBALS.easterCount == 3) {
          addCookie("easterEgg", "true");
          GLOBALS.easterOn = true;
          showMeTheSecrets();
        };
      };
    });
    var addTucao = function(els) {
      for (var i = 0; i < els.length; i ++) {
        var el = $(els[i]);
        var id = el.attr('id');
        if (GLOBALS.easterOn) {
          el.find('img').attr('title', GLOBALS.tucaoArr[id]);
        };
      };
    };

//  })(jQuery);
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-62377911-1', 'auto');
  ga('send', 'pageview');

</script>
</html>
